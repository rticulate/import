Version 1.1.9000
=============

* import is now more strict and won't allow an import from a different
  environment to replace an existing import of that name and location.
* one can now import directly into an environment (which may not be attached)
  by wrapping it in braces, e.g. import::from(pkg, symbol, .into = {env})
* import::from/here/into now include a new option, .character_only, that
  suppresses non-standard evaluation and thus allows passing object names
  or locations in variables (character strings).
* import::from() now includes new options, .all and .except
* import::from() now includes new option, .chdir
* import::here() has been fixed to use environment() explicitly to import into
  the current environment, rather than importing into "" (the empty string),
  which no longer works because of upstream changes.
* calling import::from() with .into="" now throws an explicit error rather than
  failing silently. The error instructs users to use here() explicitly to import
  into the current environment.

Version 1.1.0
=============
* There is now support to import objects from script files, i.e. a kind of
  "module". Scripts meant to expose objects for import should ideally be
  side-effect free, but this is not inforced. Any attachments are detached
  after import, but loaded namespaces remain loaded.

Version 1.0.2
=============

* You can now specify which library to use, and only one library is ever
  used in a single call: there is no ambiguity about where imports come from.
* There is a distinction between using double- and triple colon syntax;
  analogously to using :: and ::: operators.
* If the package is attached (e.g. via library) there is a startup message
  informing the user that the package is not meant to be attached.
* It is only possible to use the functions with the `import::` / `import:::`
  syntax.
